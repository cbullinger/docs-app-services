.. _sync-schema-overview:
.. _create-sync-schema:

===================
Define a Data Model
===================

.. meta::
   :description: Learn how to define a data model for a Device Sync-enabled App Services App.
   :keywords: Realm, object model, C++ SDK, Flutter SDK, Java SDK, Kotlin SDK, .NET SDK, Node.js SDK, React Native SDK, Swift SDK

.. facet::
   :name: genre
   :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   :titlesonly:

   Define Data Model in Client </sync/data-model/define-data-model/create-a-schema>
   Define Data Model in App Services </sync/data-model/define-data-model/generate-sdk-object-models>

Your data model lets Device Sync translate your synced data from an
idiomatic SDK language to MongoDB documents stored in Atlas collections.

You can define your data model in two ways:

- Client-first with Development Mode. Define your idiomatic object models in your preferred
  programming language, then generate the corresponding document schema for each
  synced object type. This is the recommended approach if you prefer to work
  directly in your client code. To learn how, refer to :ref:`create-schema-for-backend-realm-app`
- Server-first with automatic Atlas data sampling. Define your App Services schema, then generate the corresponding
  language-specific object models. This approach is useful if you already have
  data in an Atlas cluster or if you are building apps using multiple Atlas
  Device SDKs. If you would prefer this approach or need to generate an SDK data
  model from your App Services schema, refer to
  :ref:`generate-sdk-object-models`.

.. _device-sync-data-model:

Data Model
----------------------

.. TODO: INSERT DIAGRAM HERE

Device Sync syncs data between a client database using Atlas Device SDK and
Atlas collections in the App's linked data source. This requires translating
idiomatic object types to corresponding MongoDB document schemas.

To enforce data validation and ensure that App Services can correctly apply
changes between a synced database and Atlas, Device Sync requires a server-side
schema for each synced object type defined in an SDK data model. We
refer to these concepts as follows:

SDK Data Model (language specific)
  The idiomatic client-side data models that define the object types that sync
  to Atlas. You define these models directly in your client code, using any of
  the supported Atlas Device SDK languages. Each synced object type maps to an
  Atlas collection of the same name in the App's linked data source.

App Services Schema (BSON)
  The server-side schema that defines your data in BSON format. Each schema
  corresponds to an Atlas collection. App Services uses these schemas to
  translate synced client data from idiomatic objects to MongoDB documents. For
  more information on App Services schemas, refer to :ref:`schemas`.

Your client-side models and server-side schemas *must* be consistent with
each other to sync data.

Note that Device Sync supports multiple SDK data models for a single App
Services App. For example, you have an iOS app using the Swift SDK and an
Android app using the Kotlin SDK. They both use the same data source. If the
Swift data model and the Kotlin data model are consistent with each other and
the server-side schema, then both mobile apps can sync data successfully.

To learn more about how App Services maps SDK objects to an App Services schema,
refer to :ref:`sync-data-model-mapping`.
