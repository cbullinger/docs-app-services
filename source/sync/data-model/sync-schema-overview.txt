.. _sync-schema-overview:
.. _create-sync-schema:

===================================
Define a Data Model for Device Sync
===================================

.. meta::
   :description: Learn how to define your data model for an App Services App that uses Atlas Device Sync.
   :keywords: Realm, object model, sync schema, C++ SDK, Flutter SDK, Java SDK, Kotlin SDK, .NET SDK, Node.js SDK, React Native SDK, Swift SDK

.. facet::
   :name: genre
   :values: reference

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   :titlesonly:
   :hidden:

   Define SDK Objects in Client </sync/data-model/define-data-model/create-a-schema>
   Generate SDK Objects from a Schema
   </sync/data-model/define-data-model/generate-sdk-object-models>


Your app's data model is a description of the data that your app uses.
It ensures that your data complies with a specific structure, contains
only valid values, and only changes in ways that you expect.

Defining your data model is also a key part of configuring and using Atlas
Device Sync. That's because Device Sync uses your data model to validate the
idiomatic objects uploaded from client devices and translate them to JSON
documents stored in your linked Atlas :ref:`data source <data-sources>`.

.. _device-sync-data-model:

Device Sync Data Model
----------------------

To ensure the Device Sync server can correctly translate and apply changes
between synced client databases and Atlas, Device Sync requires a data model
that maps the client models to the server:

App Services Schema (JSON)
  The server-side schema that defines data as a JSON document. Each schema
  corresponds to an Atlas collection. App Services uses these schemas to
  translate synced client data from SDK objects to documents in Atlas. For
  more information, refer to :ref:`schemas`.

SDK Data Model (language specific)
  The client-side data models that define the object types that sync
  to Atlas. You define these models natively in your client code, using any of
  the supported Atlas Device SDK languages. Each synced object type maps to an
  Atlas collection of the same name in the app's linked data source.

App Services requires a matching server-side schema for each synced object type
defined in your SDK data model.

App Services also supports mapping to multiple SDK data models. For example, if
you're developing for iOS using the Swift SDK and for Android using the Kotlin
SDK, you can define your object types in both languages. As long as both models
map consistently to the shared data source, then clients using either platform
can sync to Atlas successfully.

Example Data Model
~~~~~~~~~~~~~~~~~~

In the following example, we have a todo mobile app that uses the Atlas Device
SDK for Kotlin. Our data model consists of two object types: ``Item`` and
``List``. We'll sync them to our linked Atlas database: ``todo``.

- The ``item`` and ``list`` object types are defined as Kotlin objects in the
  client code.
- Each of these Kotlin objects map to an Atlas collection of the same name
  (``Item`` and ``List``) in our database.
- Each collection has its own schema defined in JSON format that maps to the
  corresponding SDK model.

.. figure:: /images/sync-data-model.png
   :alt: Device Sync data model
   :lightbox:

To learn more about how Device Sync maps your client data to an Atlas
collection, refer to :ref:`sync-data-model-mapping`.

Approaches to Defining Your Data Model
--------------------------------------

You can define your data model from your client application first or from App
Services first, then generate the corresponding models or schema.

Define SDK Objects in the Client App
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you prefer to work directly in your client code, you can define your data
model client side first.

With Device Sync's Development Mode feature, you can define your object models
natively in your preferred programming language. App Services can then
automatically generate the corresponding JSON schema for each synced object
type.

To learn how, continue to :ref:`create-schema-for-backend-realm-app`.

Define JSON Schema in App Services
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you already have a lot of data in Atlas or if you plan to build apps with
multiple languages, you can define your schema in App Services first. You can
choose to either:

- Generate a schema from existing data in the collection, and modify as needed.
- Define a schema manually by adding field-level schema definitions.

To learn how, continue to :ref:`define-a-schema`.

After creating your document schema, you can automatically generate the
corresponding object models in the SDK language of your choice. You can copy
these models directly into your client application and use them the same way you
would any regular object or struct in your preferred programming language.

To learn how, continue to :ref:`generate-sdk-object-models`.

