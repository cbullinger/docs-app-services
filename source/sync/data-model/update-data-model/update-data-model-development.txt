.. _update-data-model-development-mode:

==================================
Update a Data Model in Development
==================================

.. meta::
   :description: Use Device Sync's Development Mode feature to update your data model while developing your client app using Atlas Device SDK.
   :keywords: Realm, object model, C++ SDK, Flutter SDK, Java SDK, Kotlin SDK, .NET SDK, Node.js SDK, React Native SDK, Swift SDK

.. facet::
   :name: genre
   :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

After you :ref:`define your data model <create-sync-schema>`, you can continue
to use Device Sync's :ref:`Development Mode <development-mode>` feature to
streamline the process of updating your data model as you develop your app.

When Development Mode is enabled, you can work entirely from your client code
and define all of your objects in your language of choice. As you make changes
to your object models and connect to the server, the server automatically
applies those changes to the corresponding server-side JSON schema.

This page describes how to update your data model while Development Mode is
enabled. To learn how to update your data model after your app goes to
production, refer to :ref:`update-data-model-production`.

.. include:: /includes/device-sync/important-disable-dev-mode-production.rst

.. _dev-mode-breaking-changes:

Development Mode
----------------

**Development Mode** is a Device Sync configuration setting that lets you
define and modify your SDK data model directly in your client code, and App
Services handles the server-side updates.

Each time a client connects and syncs data with an updated data model while
Development Mode is enabled, App Services applies your changes to the
server-side schema. This ensures that your data model remains consistent as you
develop your app.

For more information on Development Mode and how to enable it in your app, refer
to :ref:`development-mode`.

Non-Breaking Changes
~~~~~~~~~~~~~~~~~~~~

When you make :ref:`non-breaking changes <non-breaking-changes-overview>` to
your client-side model while Development Mode is enabled, the next time you
connect a client and sync data, App Services automatically updates the
corresponding schema.

Although you can make non-breaking changes to your client-side data model or to
your server-side schema, we recommend updating in the client while you are
developing your app. This is because some changes are only considered
non-breaking when made from the client side. If you do choose to make the
changes to your server-side schema, you must manually update your client-side
objects.

The following changes to your client-side model are considered non-breaking:

- Adding a new object type
- Adding a new property
- Adding a default value on an existing property
- Removing an object type
- Removing a property

Breaking Changes
~~~~~~~~~~~~~~~~

Development Mode lets you make :ref:`breaking changes
<breaking-changes-overview>` without requiring you to terminate Device Sync and
perform a client reset, as you would in a production app.

Instead, while Development Mode is enabled, you can make breaking changes to
your client-side data model, and App Services can automatically overwrite the
server-side schema.

Note that this approach requires you to delete all client data before connecting
to App Services with your updated client model. This is described in more detail
in the :ref:`update-data-model-development-mode-procedure` procedure below.

The following changes to your client-side models are considered breaking:

- Renaming an object type
- Renaming a property
- Changing a property data type
- Changing whether a property is optional or required

.. example::

   A group is developing a social media application. When they first defined
   their data model, they made ``birthday`` a required property of the ``User``
   object type. Due to privacy concerns over the amount of user data stored,
   management creates a new requirement to make this property optional.

   Developers enable :guilabel:`Development Mode` in the App Services UI, then
   update the ``User`` object model within the client code. They connect a
   client with an empty database file, and App Services applies the required
   change to their server-side ``User`` collection schema.

.. _update-data-model-development-mode-procedure:

Update a Data Model with Development Mode
-----------------------------------------

The following procedure describes how to update your data model from your
client application while Development Mode is enabled. Your changeset may include
a combination of non-breaking changes or breaking changes.

.. figure:: /images/diagram-schema-changes-dev-mode.png
   :alt: Flow chart of data model changes with Development Mode
   :lightbox:

.. procedure::

   .. step:: Before You Begin

      Before you update your data model, confirm the following:

      - Device Sync with Development Mode is enabled for your app's Device Sync
        settings. To learn how, refer to :ref:`enable-sync`.

      - If you are making breaking changes with Development Mode, confirm that
        your app meets all of the following prerequisites:

        - App backend was created *after* September 13, 2023
        - Uses the following minimum Device SDK versions:

          - C++ SDK v1.0.0 or later
          - Flutter SDK v1.6.0 or later
          - Java SDK v10.16.2 or later
          - Kotlin SDK v11.1.1 or later
          - .NET SDK v11.6.0 or later
          - Node.js SDK v12.2.0 or later
          - React Native SDK v12.2.0 or later
          - Swift SDK v10.42.2 or later

      .. note:: Contact Support to Enable in Older Apps

         You can contact support to enable this feature in older apps that can
         meet the other requirements. Otherwise, you must manually apply
         breaking changes through the App Services UI, even if Development Mode
         is enabled. For more information, refer to :ref:`update-data-model-production`.

   .. step:: Delete All Client Data

      This step is required for breaking change. If your updates only include
      non-breaking changes, you can skip this step.

      If your updates include one or more breaking change, you *must* delete
      your local data before reconnecting to the server. This ensures that the
      server can overwrite the current server-side schema with the breaking
      changes received.

      To delete all local data:

      1. Sync local changes to the server. Any unsynced changes will be lost
         when you delete your local database file.
      #. Ensure that your changes are synced, then delete the local ``.realm``
         database file and client data.

      To learn how to delete your on-device files, refer to the following Atlas Device SDK documentation for your preferred language:

      - C++ SDK - not currently supported
      - :ref:`Flutter SDK <flutter-delete-realm>`
      - :ref:`Kotlin SDK <kotlin-delete-a-realm>`
      - :ref:`Java SDK <io_realm_Realm_deleteRealm>`
      - :ref:`.NET SDK <dotnet-delete-a-realm>`
      - :js-sdk:`Node.js SDK <Realm.html#.deleteFile>`
      - :js-sdk:`React Native SDK <Realm.html#.deleteFile>`
      - :ref:`Swift SDK <swift-delete-a-realm>`

   .. step:: Update Your SDK Data Model

      Make the desired updates to your client-side objects. For information on
      the specific updates you can make to your data model, refer to
      :ref:`update-your-data-model`.

      .. include:: /includes/tip-define-default-values.rst

   .. step:: Sync Your Changes

      1. Open a synced database with your updated data model. If your updates
         include breaking changes, the database *must* be empty.
      #. Run your client app to sync your updated data model to the App Services
         backend.

      Once the client connects, the server overwrites the existing server-side
      schema with the changes from the updated client-side data model.

      For more information on opening a synced database, refer to the following Atlas Device SDK documentation for your preferred language:

      - :ref:`C++ <cpp-open-synced-realm>`
      - :ref:`Flutter <flutter-open-synced-realm>`
      - :ref:`Kotlin <kotlin-open-a-synced-realm>`
      - :ref:`Java <java-open-a-synced-realm>`
      - :ref:`.NET <dotnet-configure-and-open-a-synced-realm>`
      - :js-sdk:`Node.js <node-open-a-synced-realm>`
      - :js-sdk:`React Native <react-native-open-a-synced-realm>`
      - :ref:`Swift <ios-configure-and-open-a-synced-realm>`

Troubleshooting
---------------

You might encounter one of the following errors when attempting to update your data model:

MongoEncodingError
  If any existing Atlas documents do *not* match the uploaded client-side
  data model, they cannot be synced to the client. An error message is sent to
  the client with instructions on how to handle syncing these documents. For
  more information, refer to :ref:`unsynced-documents`.

Changes cannot be made in additive-only schema mode
  If you make a breaking change and connect a client that has data in its local
  database file, the app will fail at startup with an error indicating that the
  ``changes cannot be made in additive-only schema mode``.

  To resolve, ensure that you delete all existing local data, as described
  above, before re-attempting to connect with your changes.
