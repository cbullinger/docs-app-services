.. _update-data-model-development-mode:

==================================
Update a Data Model in Development
==================================

.. meta::
   :description: Use Device Sync's Development Mode feature to update your data model while developing your client app using Atlas Device SDK.
   :keywords: Realm, object model, C++ SDK, Flutter SDK, Java SDK, Kotlin SDK, .NET SDK, Node.js SDK, React Native SDK, Swift SDK

.. facet::
   :name: genre
   :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

After you :ref:`define your data model <create-sync-schema>`, you can use Device
Sync's :ref:`Development Mode <development-mode>` feature to reduce the time and
effort required to update your data model.

When enabled, you can make non-breaking and breaking changes to your client-side
data model, and App Services automatically updates the server-side schema the
next time you sync data with the updated model. Note that breaking changes
*must* be made from your client-side data model.

To learn how to update your data model after your app goes to production, refer
to :ref:`update-data-model-production`.

.. include:: /includes/important-disable-dev-mode-production.rst

.. _dev-mode-breaking-changes:

Development Mode
----------------

**Development Mode** is a Device Sync configuration setting that lets you
define and modify your SDK data model from your client code, and App
Services automatically handles the server-side updates.

The first time a client connects and syncs data while Development Mode is
enabled, App Services :ref:`maps your idiomatic client model
<map-realm-to-atlas-with-development-mode>`
to an automatically generated App Services schema. Each generated schema is
assigned to a collection in the linked cluster with the same name as the
corresponding synced object type.

As you continue to develop your data model and sync data, App Services keeps
your server-side schema updated with your changes.

For more information on Development Mode and how to enable it in your app, refer
to :ref:`development-mode`.

Non-Breaking Changes
~~~~~~~~~~~~~~~~~~~~

Although you can make :ref:`non-breaking changes
<non-breaking-changes-overview>` to your client-side data model or to your
server-side schema, we recommend making your changes in the client while you are
developing your app. This is because some changes are only considered
non-breaking when made from the client side. Additionally, if you make the
changes to your server-side schema, you must manually handle updating your
client data model.

If you make your changes to your client-side model, the next time you connect a
client and sync data, App Services automatically updates the corresponding
schema without additional action.

The following changes to your client-side model are considered non-breaking:

- Adding a new object type
- Adding a new property
- Adding a default value on an existing property
- Removing an object type
- Removing a property

Breaking Changes
~~~~~~~~~~~~~~~~

In a production app, :ref:`breaking changes <breaking-changes-overview>` to your
data model require you to terminate Sync and perform a client reset. However,
with Development Mode, you can make breaking changes to your client-side data
model, and App Services automatically handles applying the changes to your
server-side schema the next time you sync data.

To make breaking changes with Development Mode, your app must meet the
prerequisites outlined below, you must make the breaking changes to your
client-side data model, and you must connect your client with an empty synced
database. This is described in more detail in the
:ref:`update-data-model-development-mode-procedure` procedure below.

The following changes to your client-side model are considered breaking:

- Renaming an object type
- Renaming a property
- Changing a property data type
- Change whether a property is optional or required

.. example::

   A group is developing a social media application. When they first defined
   their data model, they made ``birthday`` a required property of the ``User``
   object type. Due to privacy concerns over the amount of user data stored,
   management creates a new requirement to make this property optional.

   Developers enable :guilabel:`Development Mode` in the App Services UI, then
   update the ``User`` object model within the client code. They delete their
   local database file, then connect the client. App Services applies the
   required change to their server-side ``User`` collection schema.

.. _update-data-model-development-mode-prerequisites:

Prerequisites
`````````````

To make breaking changes with Development Mode, your App Services App must
meet the following requirements:

- Created *after* September 13, 2023
- Uses the following minimum Device SDK versions:

  - C++ SDK v1.0.0
  - Flutter SDK v1.6.0
  - Java SDK v10.16.2
  - Kotlin SDK v11.1.1
  - .NET SDK v11.6.0
  - Node.js SDK v12.2.0
  - React Native SDK v12.2.0
  - Swift SDK v10.42.2

.. note:: Contact Support to Enable in Older Apps

   For apps created *before* September 13, 2023 that can meet the other
   requirements, you can contact support to enable this feature. Otherwise, you
   must manually apply breaking changes through the App Services UI. For
   more information, refer to :ref:`update-data-model-production`.

.. _update-data-model-development-mode-procedure:

Update a Data Model with Development Mode
-----------------------------------------

The following describes how to update your data model from your client code
in a Development Mode-enabled app. Updates could include non-breaking changes,
breaking changes, or a combination of both.

.. procedure::

   .. step:: Before You Begin

      Before you update your data model, confirm the following:

      - Device Sync with Development Mode is enabled in your App's Device Sync
        configuration settings. To learn how, refer to :ref:`enable-sync`.

      - If you are making breaking changes, confirm that your app meets the
        :ref:`prerequisites <update-data-model-development-mode-prerequisites>`
        outlined above.

   .. step:: Delete Client Data (Breaking Changes Only)

      If your updates include breaking changes, you *must* delete your local
      data. This ensures that you can connect with an empty synced database.
      Otherwise, Device Sync cannot overwrite the current server-side schema and
      apply the breaking changes received.

      To delete all local data:

      1. Sync any local changes to Atlas. Any unsynced changes will be lost when
         you delete your local database file.
      #. Ensure that your changes are synced, then delete the local ``.realm``
         database file and client data.

      To learn how to delete your on-device files using your preferred SDK,
      refer to the following documentation:

      - C++ SDK - not currently supported
      - :ref:`Flutter SDK <flutter-delete-realm>`
      - :ref:`Kotlin SDK <kotlin-delete-a-realm>`
      - :ref:`Java SDK <io_realm_Realm_deleteRealm>`
      - :ref:`.NET SDK <dotnet-delete-a-realm>`
      - :js-sdk:`Node.js SDK <Realm.html#.deleteFile>`
      - :js-sdk:`React Native SDK <Realm.html#.deleteFile>`
      - :ref:`Swift SDK <swift-delete-a-realm>`

   .. step:: Update Your SDK Data Model

      Make the desired updates to your client-side objects. For information on
      the specific updates you can make to a data model, refer to
      :ref:`update-your-data-model`.

   .. step:: Open a Synced Database and Sync Changes

      1. Open a synced database with your updated data model. If your updates
         include breaking changes, the database *must* be empty (contains no
         local data).
      #. Run your client app to sync your updated data model to the App Services
         backend.

      Once the client connects, Device Sync overwrites the existing server-side
      schema with the changes from the updated client-side data model.

      For more information on opening a synced database with your preferred SDK,
      refer to the following documentation:

      - :ref:`C++ SDK <cpp-open-synced-realm>`
      - :ref:`Flutter SDK <flutter-open-synced-realm>`
      - :ref:`Kotlin SDK <kotlin-open-a-synced-realm>`
      - :ref:`Java SDK <java-open-a-synced-realm>`
      - :ref:`.NET SDK <dotnet-configure-and-open-a-synced-realm>`
      - :js-sdk:`Node.js SDK <node-open-a-synced-realm>`
      - :js-sdk:`React Native SDK <react-native-open-a-synced-realm>`
      - :ref:`Swift SDK <ios-configure-and-open-a-synced-realm>`

Troubleshooting
~~~~~~~~~~~~~~~

You might encounter one of the following errors when attempting to update your data model:

MongoEncodingError
  If any existing Atlas documents do *not* match the uploaded client-side
  data model, they cannot be synced to the client. An error message is sent to
  the client with instructions on how to handle syncing these documents. For
  more information, refer to :ref:`unsynced-documents`.

Changes cannot be made in additive-only schema mode
  If you make a breaking change and connect a client with data in its local
  database file, the app will fail at startup with an error indicating that the
  ``changes cannot be made in additive-only schema mode``. To resolve, ensure
  that you delete all existing local data, as described above, before
  re-attempting to connect with your changes.
