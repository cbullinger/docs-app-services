.. _update-data-model-production-apps:

==========================================
Update a Data Model with Schema Versioning
==========================================

.. meta::
   :description: Make schema versioning changes to your Device Sync data model.

.. facet::
   :name: genre
   :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. TODO: Update [DATE TBD] 

While your app is in production, you may need to update your Device Sync data
model. With schema versioning, you can make incremental, backward-compatible
changes to your data model without disrupting your app's users. Previously,
these changes would break older clients. 

To review eligibility requirements for using schema versioning in your app,
refer to the :ref:`<update-data-model-production-apps-prerequisites>` section on
this page.

If your app is still in development, we recommend that you use Development Mode
to update your data model. To learn how, refer to :ref:`update-data-model-development-mode`.

.. _schema-versioning:

Schema Versioning
-----------------

**Schema versioning** is a Device Sync feature that lets you manage iterative 
changes to your data model while your app is in production. When enabled for an
eligible app, you can make schema versioning changes to your server-side schema,
and App Services will automatically handle migrating clients to the new schema
version.

When schema versioning is initially enabled for an app, the schema version
defaults to ``0``. When you make a schema versioning change (or a breaking
change when the version is greater than 0), the schema version increments by 1.  

You can create and set your schema versions from the App Services UI.  

You can also set the schema version from the client code with supported Atlas Device SDKs: 

.. TODO: add link to supported SDK docs (and how exactly do we talk about this when this launches?) 

.. note:: Breaking Changes with Schema Versioning

   While schema versioning can help you manage changes to your data model,
   breaking changes are still considered breaking and should be avoided if
   possible. For more information on breaking changes, their impact, and how to implement them in your app, refer to :ref:`breaking-changes-schema-versioning-overview`. 

Change Types
~~~~~~~~~~~~

When schema versioning is enabled, changes are categorized as one of three types:

- **Non-Breaking (Additive):** Changes that do *not* create a new schema
  version, unless they are applied with schema versioning or breaking changes. 

  Instead of creating a new schema, additive changes are automatically applied to the current schema version. This means that only clients with a schema version equal to or greater than that version can reference the added element.
  
  Additive changes include:

  - Adding a new object type or property
  - Adding a default value on a property

- **Schema Versioning (Supported):** Changes that always create a new compatible
  schema version, unless they are applied at the same time as breaking changes. 

  Schema versioning changes include:

  - Removing an existing object type or property 
  - Changing whether an existing property is optional or required

- **Breaking (Unsupported):** Changes that create a new incompatible schema
  version only if the current version is greater than 0, even if they are
  applied at the same time as non-breaking or schema versioning changes.
  Otherwise, breaking changes are applied to the current schema version ``0``. 

  Breaking changes include:

  - Renaming an existing object type or property
  - Changing the data type of an existing property

  Regardless of whether they increment the schema version, breaking changes
  *always* require terminating and re-enabling Device Sync. 

  .. include:: /includes/warn-terminate-sync-client-reset.rst

.. _schema-versioning-quick-reference:

Change Types: Quick Reference
`````````````````````````````

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Description of Change
     - Type of Change
     - Increments Version 
     - Compatible
   * - :ref:`Add an object type <update-model-add-object-type>`
     - Non-breaking (Additive)
     - No
     - N/A
   * - :ref:`Add a property <update-model-add-required-property>`
     - Non-breaking (Additive)
     - No
     - N/A
   * - :ref:`Add default value on a property <update-model-add-a-default-value>`
     - Non-breaking (Additive)
     - No
     - N/A
   * - :ref:`Remove an object type <update-model-remove-object-type>`
     - Schema Versioning (Supported)
     - Yes
     - Yes
   * - :ref:`Remove a property <update-model-remove-property>`
     - Schema Versioning (Supported)
     - Yes
     - Yes
   * - :ref:`Change whether property is optional or required <update-model-change-property-status>`
     - Schema Versioning (Supported)
     - Yes
     - Yes
   * - :ref:`Rename an object type <update-model-change-object-type-name>`
     - Breaking (Unsupported)
     - Yes
     - No
   * - :ref:`Rename a property <update-model-change-property-name>`
     - Breaking (Unsupported)
     - Yes
     - No
   * - :ref:`Change property type <update-model-change-property-type-but-keep-name>`
     - Breaking (Unsupported)
     - Yes
     - No

.. tip:: Remap a Name Instead of Renaming

   Several Device SDKs support remapping a property or class name. Because
   renaming is considered a breaking change, we recommend remapping
   through the client code when possible. To learn how, refer to the following
   .. TODO: add link

Version Compatibility
~~~~~~~~~~~~~~~~~~~~~

Schema versions are considered either compatible or incompatible with previous
schemas, depending on the type of change made: 

- **Compatible:** When you make a schema versioning change, the new schema
  version is backward-compatible with all previous schema versions to the
  current minimum version, and forward-compatible until you make a breaking change.

- **Incompatible:** When you make a breaking change, the new schema version is
  *not* backward-compatible with any previous schema versions. An incompatible
  schema version invalidates all previous schemas and effectively becomes the
  new minimum version. 

Schema Versioning and Development Mode
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To use schema versioning, you must disable Development Mode. You *cannot* use
both at the same time in the same app. To learn how to disable Development Mode
in the Sync Settings, refer to :ref:`Disable Development Mode
<enable-development-mode>`.

When you disable Development Mode, schema versioning is automatically enabled
for eligible apps.

If you enable Development Mode in an app with existing schema versions, schema
versioning is automatically disabled. App Services deletes all existing schema
versions and resets the current version to ``0``. You cannot create incremented
versions again until Development Mode is disabled. 

.. warning:: Enabling Development Mode Can Break Versioned Clients

   Because existing schema versions are deleted when you enable Development
   Mode, any clients that use the deleted schemas will break.

   .. TODO: Q. What do clients need to do in this case? Clear the schemaVersion from syncConfig?

Schema Versioning and Terminating Sync 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can :ref:`terminate and re-enable Device Sync <terminating-realm-sync>`
without affecting schema versioning. All existing schema versions are retained.
You can also make changes while Sync is terminated, and the schema version
increments as expected. 

However, if you update your data model while Device Sync is terminated, any
changes that you make are considered breaking changes, even if they are
normally considered non-breaking or schema versioning changes. 

.. _update-data-model-production-apps-prerequisites:

Prerequisites
-------------

To use schema versioning in App Services, your App Services App must meet the following requirements:

- App is created *after* [DATE TBD]. Apps created before this date can contact 
  support to enable this feature.  
- Device Sync must be enabled. To learn how, refer to :ref:`enable-sync`.
- Development Mode must be disabled. To learn how, refer to :ref:`Disable
  Development Mode <enable-development-mode>`. 

.. TODO: confirm sdk versions & link out to SDK docs re. setting schema version

To set schema versioning from the client, your app must also use a minimum Device SDK version:

- C++ SDK - unsupported 
- Flutter SDK v2.1.0
- Java SDK v10.18.0
- Kotlin SDK - unsupported
- .NET SDK v11.7.0
- Node.js SDK v12.6.0
- React Native SDK v12.6.0
- Swift SDK v10.46.0

.. _update-data-model-production-app-procedure:

Make Changes with Schema Versioning
-----------------------------------

The following describes how to make changes to your server-side schema through
the App Services UI when schema versioning is enabled.


DOCS RECOMMENDATION: Recommend users make another schema change that is the inverse of the one theyre reverting

Are backward- and forward-compatible across multiple, non-sequential versions
(client on schema v1 is compatible with schema v0 and future schema v10)

For information on the specific changes you can make, refer to 
:ref:`sync-schema-overview`.

.. procedure::

   .. step:: Make Schema Changes in App Services UI

      In the App Services UI, navigate to the :guilabel:`Schema` page.

      1. From the :guilabel:`Collections` tab, select the schema that you want to modify.
      
      .. note:: Define Default values

         If your changes impact the default values of a property

         define the default value in the App Services UI. To learn how, refer to

      2. Click :guilabel:`Save`. 
      3. If you have deployment drafts enabled, click :guilabel:`Save Draft` to save your changes as a draft.
      4. A confirmation window displays with a summary of your changes. 
      
   .. step:: Confirm and Deploy Changes

      From the :guilabel:`Are you sure you want to deploy?` window, review your
      changes. Depending on the type of changes you made, you will see the
      following:

      .. tabs::
         
         .. tab:: Non-Breaking 
            :tabid: additive
      
            If your changeset *only* includes non-breaking changes (labeled as
            "ADDITIVE"), your changes are automatically applied to the current
            schema version without any additional handling or versioning. 
            
            .. TODO: Confirm - do you get a confirmation window for non-breaking changes?
      
            1. Review your changes and click :guilabel:`Deploy and re-initialize`.
            2. Your changes are automatically applied to the current schema
               version. The schema version is *not* incremented, there is
               no compatibility impact on previous schemas, and nothing is written to the version history.

         .. tab:: Schema Versioning
            :tabid: supported

            If your changeset includes at least one schema versioning change
            (labeled as "SUPPORTED"), then all changes (including any
            non-breaking changes) are applied to a new compatible schema version. 
        
            1. Review your changes, which may include non-breaking changes. The window displays the current schema version number and the incremented number of the new schema created upon deployment.
            2. Click :guilabel:`Deploy`.
            3. Your changes are applied to the new schema version. The new
               version is compatible with previous schemas.

         .. tab:: Breaking
            :tabid: unsupported

            If your changeset includes at least one breaking change (labeled as
            "UNSUPPORTED"), then all changes (ncluding any non-breaking and
            schema versioning changes), are applied together. Upon deployment of
            breaking changes, App Services terminates and re-initializes Device Sync.
            
            1. Review your changes, which may include non-breaking and schema
               versioning changes. 
               
               - If the current schema version is greater than 0, the window
                 displays the current schema version number and the incremented
                 number of the new incompatible schema created upon deployment.
               - If the current schema version is 0, the window does *not*
                 display any version increment information.
            2. Click :guilabel:`Deploy and re-initialize`.
            3. After Device Sync terminates and re-initializes, your changes are
               applied. 

               - If App Services created a new schema, it becomes the new minimum version and is incompatible with any previous schemas.
               - If App Services did not create a new schema, the changes are applied to the current schema version ``0``.

   .. step:: Perform a Client Reset (if necessary)

      If App Services had to terminate and re-enable Device Sync due to breaking
      changes, your client must perform a manual client reset to ensure that clients can
      successfully connect to Atlas. For more information, refer to
      :ref:`<client-resets>`.

Set Your Schema Version
-----------------------

.. TODO: Link out to respective sdk procedures for setting schema version from client?

Once you have multiple schema versions, you can view previous schemas and select
a version to use as your current schema.

.. procedure::

   .. step:: Select a Schema Version

      In the App Services UI, navigate to the :guilabel:`Schema` page.

      Select the :guilabel:`Sync Models` tab.

      displays dropdown and timestamp 

      :guilabel:`Sync schema version` field displays the currently
      selected schema version, with a dropdown of all available schema versions.
      
      if you select a different version, the sync models update to reflect the
      selected schema.

      Schema versions are listed in descending order, with the most recent
      version at the top.

Troubleshooting
---------------

.. TODO: update with server-side errors (client-side errors will be updated in the SDK docs)

You might encounter the following errors:

- [TBD]
