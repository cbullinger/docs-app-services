.. _update-data-model-production-apps:

===============================
Update Data Model in Production
===============================

.. meta::
   :description: Update your Device Sync data model from your client app using Development Mode.

.. facet::
  :name: genre
  :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Schema Versioning
-----------------

Device Sync supports schema versioning, which allows you to make changes to your

When enabled, a new base schema version (`v0`) is created. 

Schema versions: 
Are persisted in a client file with version change history. 
Can be upgraded or downgraded rolled back. Users can change their schema version from the UI.
Note: We don't really have a built-in rollback mechanism on the server. 
DOCS RECOMMENDATION: Recommend users make another schema change that is the inverse of the one they’re reverting
Can be manually deprecated through the UI. Useful for blocking clients from connecting if using an old, incompatible version. NOTE: Cut from project scope
Are backward- and forward-compatible across multiple, non-sequential versions (client on schema v1 is compatible with schema v0 and future schema v10)
Compatibility dictated by “earliest allowed schema version” (i.e. the version of the latest INCOMPATIBLE change). Any clients connecting at a prior version will be rejected with the “invalid schema version” error.


Breaking Changes with Schema Versioning

When you make a breaking change to your schema, you must increment the schema
version. This is because Device Sync uses the schema version to determine if a
client is compatible with the server. If the client is not compatible, the
server will reject the connection.

For apps that support schema versioning, breaking changes *always* create a new
schema version. However, depending on the type of breaking change made, the new version
might not be backward-compatible with previous schema versions:

- **Compatible Breaking Changes:** Compatible breaking changes are changes that you can make to your server-side schema that are backward-compatible with the earliest allowed schema version. These changes do not require additional handling in your app. 
  
  Compatible breaking changes include: 
  
  - Removing an object type
  - Removing a property
  - Changing whether a property is required or optional

- **Incompatible Breaking Changes:** Incompatible schema versioning changes are
  changes that you can make to your server-side schema that are not
  backward-compatible with any previous schemas. An incompatible breaking change
  creates a new schema version *and* that version becomes the new earliest
  allowed schema version. All previous schemas are invalidated.

  Incompatible breaking changes include: 
  
  - Renaming an object type
  - Renaming a property
  - Changing the data type of a property

.. _update-data-model-production-apps-prerequisites:

Prerequisites
-------------

To make breaking changes to your server-side schema using schema versioning, your App Services App must meet the following requirements:

- The App is created *after* [DATE TBD] with Device Sync enabled. To learn how, refer to :ref:`enable-sync`.
- Development Mode must be disabled. To learn how, refer to :ref:`enable-development-mode`.

- The App uses a minimum Device SDK version:

  - C++ SDK v1.0.0
  - Flutter SDK v1.6.0
  - Java SDK v10.16.2
  - Kotlin SDK v11.1.1
  - .NET SDK v11.6.0
  - Node.js SDK v12.2.0
  - React Native SDK v12.2.0
  - Swift SDK v10.42.2

For apps created *before* September 13, 2023, you must manually update your
object schema in the App Services UI. For more information, refer to
:ref:`migrate-schema-partner-collection`.

.. tip:: Contact Support to Enable in Older Apps
   
   You can contact support if you are interested in enabling this feature in an 
   app created before September 13, 2023 that can meet the other requirements.
