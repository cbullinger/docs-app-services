.. _update-your-data-model:
.. _destructive-changes-synced-schema:
.. _additive-changes-synced-schema:

======================
Update Your Data Model
======================

.. meta::
   :description: Learn how to update an existing data model for a Device Sync-enabled App Services App.
   :keywords: Realm, object model, C++ SDK, Flutter SDK, Java SDK, Kotlin SDK, .NET SDK, Node.js SDK, React Native SDK, Swift SDK

.. facet::
   :name: genre
   :values: reference

.. facet::
   :name: programming_language
   :values: shell, json

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   :titlesonly:

   Update Data Model in Development </sync/data-model/update-data-model/update-data-model-development>
   Update Data Model in Production </sync/data-model/update-data-model/update-data-model-production>
   Migrate Data Model to Partner Collection </sync/data-model/update-data-model/migrate-schema-partner-collection>

You will probably need to make changes to your Device Sync-enabled app's
:ref:`data model <device-sync-data-model>` at some point. For example, as
you're developing your app, you realize that an existing property should be
required. Or while planning for a future release, you determine that a new
feature requires a new object type.

In general, we refer to data model updates in the following terms:

What type of change are you making?
  We broadly categorize changes to a data model as being either *breaking* or
  *non-breaking*, depending on whether they break compatibility with your
  current model. These change types are discussed in more detail below, or you can check out the handy :ref:`breaking-change-quick-reference` section.

Where are you making the change?
  Because Device Sync requires a matching client-side SDK data model and
  server-side App Services schema, we discuss data model changes in terms of
  whether you update the *client side* or the *server side* first.
  Depending on the change you are making, there are implications for which side
  you update first and how you apply those same changes to the other side.
  This is discussed in more detail below.

Is your app in development or production?
   The recommended process for updating your data model depends on whether you
   are updating an app in production or in development:

   - If you are updating an app in development, you can use App Services'
     :ref:`Development Mode <development-mode>` feature. Instead of having to
     manage data model updates through App Services, you can update and refine
     your data model directly in your client code and App Services handles the
     server-side changes. To learn more, refer to
     :ref:`update-data-model-development-mode`.

   - If you are updating production-level app, you must be careful about
     which changes you make and consider the impact on existing clients.
     For example, some changes can be applied without disrupting users, but
     others can completely break compatibility with older data models. To learn more, refer to :ref:`update-data-model-production`.

   .. include:: /includes/important-disable-dev-mode-production.rst

Change Types
------------

Let's dive into the types of changes that you can make to your data model. There
are two main types: **breaking** and **non-breaking**. In short, both breaking
changes break compatibility with your current data model, and require that you
:ref:`terminate and re-enable Device Sync <pause-or-terminate-sync>`, then
perform a :ref:`client reset <client-resets>` to restore connectivity with existing clients. Non-breaking changes do not.

For apps in production, there is an additional subset of breaking change called
**schema versioning**. These changes create a backward-compatible schema
version, rather than fully breaking compatibility with previous models.

The following sections provide more detail on each of these types. Or you can
skip to the :ref:`breaking-change-quick-reference` section for a summary overview.

.. _non-breaking-changes-overview:

Non-Breaking Changes
~~~~~~~~~~~~~~~~~~~~

Non-breaking changes maintain compatibility with your existing data model. You
can make a non-breaking change to your client or server-side schema, and client
devices can continue to sync data without interruption.

Whether a change is considered non-breaking depends on which side of the data
model you are updating first. For details, refer to the
:ref:`breaking-change-quick-reference` section.

- **Non-Breaking Changes in Development:** While you develop your app with
  :ref:`Development Mode <development-mode>`, you can
  make non-breaking changes in your client code, and App Services handles
  applying those changes to your server-side schema. If you make a non-breaking
  change to the server-side schema, you must manually apply the change to update
  your
  client-side model. To learn more, refer to
  :ref:`update-data-model-development-mode`.
- **Non-Breaking Changes in Production:** Once your app is in production, you
  can make non-breaking changes to your server-side schema or to your
  client-side data model, then update the corresponding side without breaking
  compatibility for existing clients. To learn more, refer to
  :ref:`update-data-model-production`.

.. _breaking-changes-overview:

Breaking Changes
~~~~~~~~~~~~~~~~

Breaking changes break compatibility with your existing data model and require
additional action to apply. When you make a breaking change, existing clients
cannot connect and sync data until they upgrade to the new data model.

Although :ref:`development-mode` simplifies this process, it is not intended for
production use. We recommend that you only make breaking changes in a production
app when absolutely necessary.

You can make breaking changes to your server-side schema or to your
client-side data model, but there are implications depending on the state of
your app and the change your making. Note that you cannot update your App
Services schema with breaking changes using the {+cli+} or automated deploy with
GitHub. You must use the App Services UI.

- **Breaking Changes in Development:** While you develop your app, you can make
  breaking changes to your client code, and App Services automatically handles
  applying those changes to your server-side schema. To learn more, refer to
  :ref:`update-data-model-development-mode`.
- **Breaking Changes in Production:** Once your app is in production, and you
  determine you need to make a breaking change, you can choose to either update
  your current data model directly or create a new data model with the changes:

  - If you choose to update your data model directly, you must terminate and
    re-enable Device Sync, which breaks connectivity for all existing clients.
    You then perform a client reset to restore connectivity. To learn more,
    refer to :ref:`update-data-model-production`.

    .. important:: Existing Clients Lose Unsynced Data After Reset

       If you perform a client reset, there is *no* way to migrate data from  clients that are using an old version of the data model. If clients have unsynced data, that data will be lost.

  - If you can't tolerate losing unsynced data or you need to maintain
    backward-compatibility with older clients that can't update, you can choose
    to create a new "partner collection" schema with the desired changes
    instead. You then copy your old data to this new collection, and set up
    triggers to ensure data consistency. To learn more, refer to
    :ref:`migrate-schema-partner-collection`.

.. include:: /includes/important-breaking-changes-sync-terminated.rst

.. _schema-versioning-changes-overview:

Schema Versioning Changes
~~~~~~~~~~~~~~~~~~~~~~~~~

Once your app is in production, you can make schema versioning changes to your
server-side schema. Schema versioning changes are a special subset of breaking
change for production apps that do not require you to terminate Device Sync or
manually handle the client reset.

When you deploy a schema versioning change, App Services creates a new
backward-compatible version of your existing server-side schema, then
automatically handles existing clients on older schemas in a backward-compatible
way. This ensures data consistency across schema versions, as devices on older
schema versions can still sync with the Device Sync server and other SDK
devices.

To learn more, refer to :ref:`update-data-model-production`.

.. important:: Schema Versioning is Incompatible with Development Mode

   While :ref:`Development Mode <development-mode>` is enabled, App Services
   disables schema versioning in your app, and considers schema versioning
   changes to be breaking changes.

   Additionally, if you enable Development Mode in an app with versioned
   schemas, App Services deletes all existing versions. This might disrupt any
   clients using a versioned schema.

.. TODO from Ben: The main distinction is that the developer must manually upgrade the client to the new schema version (by making the changes in the SDK)

.. _breaking-change-quick-reference:

Update a Data Model: Quick Reference
------------------------------------

This section summarizes whether a data model change is considered a
non-breaking, schema versioning, or breaking change when made to the server-side
App Services schema or to the client-side SDK data model.

.. figure:: /images/data-model-changes-from-client-or-server.png
   :alt: Data model changes from client or server
   :lightbox:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Description of Change
     - Server-Side Schema
     - Client-Side Data Model
   * - :ref:`Add an object type <schema-update-add-object-type>`
     - Non-breaking
     - Non-breaking
   * - :ref:`Add a property <schema-update-add-required-property>`
     - Non-breaking
     - Non-breaking
   * - :ref:`Add default value on a property <schema-update-add-a-default-value>`
     - Non-breaking
     - Non-breaking
   * - :ref:`Remove an object type <schema-update-remove-object-type>`
     - Schema Versioning*
     - Non-breaking
   * - :ref:`Remove a property <schema-update-remove-property>`
     - Schema Versioning*
     - Non-breaking
   * - :ref:`Change whether a property is optional or required <schema-update-change-property-status>`
     - Schema Versioning*
     - Breaking
   * - :ref:`Rename an object type <schema-update-change-object-type-name>`
     - Breaking
     - Breaking
   * - :ref:`Rename a property <schema-update-change-property-name>`
     - Breaking
     - Breaking
   * - :ref:`Change property data type <schema-update-change-property-type-but-keep-name>`
     - Breaking
     - Breaking

* If Development Mode is enabled in your app, schema versioning is disabled, and
  schema versioning changes are considered breaking changes.

The following diagram shows the types of changes you can make and the
process perform the change:

.. TODO: UPDATE WITH NEW DIAGRAM

.. .. figure:: /images/schema_changes_with_versioning.png
..    :alt: Flow chart of schema changes
..    :lightbox:


