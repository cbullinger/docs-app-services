.. _update-your-data-model:
.. _destructive-changes-synced-schema:
.. _additive-changes-synced-schema:

======================
Update Your Data Model
======================

.. meta::
   :description: Learn how to update an existing data model for a Device Sync-enabled App Services App.
   :keywords: Realm, object model, C++ SDK, Flutter SDK, Java SDK, Kotlin SDK, .NET SDK, Node.js SDK, React Native SDK, Swift SDK

.. facet::
   :name: genre
   :values: reference

.. facet::
   :name: programming_language
   :values: shell, json

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   :titlesonly:

   Update Data Model in Development </sync/data-model/update-data-model/update-data-model-development>
   Update Data Model in Production </sync/data-model/update-data-model/update-data-model-production>
   Migrate to Partner Collection Data Model </sync/data-model/update-data-model/migrate-schema-partner-collection>

You will most likely need to make changes to your app's
:ref:`data model <device-sync-data-model>` after you have defined it. For
example, while developing your app, you may realize that an existing
property should be required. Or while planning for a future release for your
production-level app, you determine that a feature requires a new object type.

In general, we refer to data model updates in the following terms:

What type of change are you making?
  We broadly categorize changes to a data model as being either *breaking* or
  *non-breaking*, depending on whether they break compatibility with your
  current model. These change types are discussed in more detail below, or you
  can check out the :ref:`breaking-change-quick-reference` section.

Where are you making the change?
  Because Device Sync requires a matching client-side SDK data model and
  server-side App Services schema, we discuss data model changes in terms of
  whether you update the *client side* or the *server side* first.
  Depending on the change you make, there are implications for which side
  you should update first and how you apply those same changes to the other
  side. This is discussed in more detail below.

Is your app in development or production?
  The recommended process for updating your data model also depends on whether
  you are updating an app in production or in development:

  - If your app is in development, you can use Device Sync's
    :ref:`Development Mode <development-mode>` feature to streamline data model
    changes, including breaking changes. To learn more, refer to
    :ref:`update-data-model-development-mode`.

  - If you are updating a production-level app, data model changes require
    additional planning to reduce the impact to existing clients. To learn more,
    refer to :ref:`update-data-model-production`.

    .. include:: /includes/device-sync/important-disable-dev-mode-production.rst

Change Types
------------

Let's dive into the types of changes that you can make to your data model. There
are two main types: **breaking** and **non-breaking**. In short, breaking
changes break compatibility with your current data model and require additional
action to restore connectivity with existing clients. Non-breaking changes do
not.

For apps in production, there is an additional subset of breaking changes:
**schema versioning**. These changes create a backward-compatible schema
version, rather than fully breaking compatibility with previous models.

The following sections provide more detail on each of these types. Or you can
skip to the :ref:`breaking-change-quick-reference` section for a summary
overview.

.. _non-breaking-changes-overview:

Non-Breaking Changes
~~~~~~~~~~~~~~~~~~~~

Non-breaking changes maintain compatibility with your existing data model. You
can make a non-breaking change to your client or server-side schema, and client
devices can continue to sync data without interruption.

- **Non-Breaking Changes in Development:** While you develop your app with
  :ref:`Development Mode <development-mode>`, you can
  make non-breaking changes in your client code, and App Services automatically
  applies those changes to your server-side schema. To learn more, refer to
  :ref:`update-data-model-development-mode`.
- **Non-Breaking Changes in Production:** Once your app is in production, you
  can make non-breaking changes to your server-side schema, then manually update
  the corresponding client-side models without breaking compatibility for
  existing clients. To learn more, refer to :ref:`update-data-model-production`.

.. _breaking-changes-overview:

Breaking Changes
~~~~~~~~~~~~~~~~

Breaking changes break compatibility with your existing data model and require
you to :ref:`terminate and re-enable Device Sync <pause-or-terminate-sync>`.
This results in existing clients being unable to sync data until
they upgrade to the new data model and reconnect through a :ref:`client reset
<client-resets>`.

Development Mode streamlines this process for apps in development by letting you
make breaking changes without requiring you to terminate Sync. However,
Development Mode is not intended for production use and should not be enabled in
a production-level app. As a result, we recommend that you only make breaking
changes in a production app when necessary.

You can make breaking changes to your server-side schema or to your
client-side data model, but there are implications depending on the state of
your app and the change your making. Note that you cannot update your App
Services schema with breaking changes using the {+cli+} or automated deploy with
GitHub. You must use the App Services UI.

- **Breaking Changes in Development:** While you develop your app,
  :ref:`Development Mode <development-mode>` lets you make breaking changes to
  your client code, and App Services automatically handles overwriting
  your server-side schema without requiring you to terminate Sync. To learn
  more, refer to :ref:`update-data-model-development-mode`.
- **Breaking Changes in Production:** Once your app is in production, and you
  determine you need to make a breaking change, you can choose to either update
  your current data model directly or create a new data model with the changes:

  - If you choose to update your data model directly with a breaking change, you
    *must* terminate Device Sync, which breaks connectivity for all existing
    clients. To learn how to implement a breaking change and restore clients'
    ability to sync data, refer to :ref:`update-data-model-production`.
  - If you can't tolerate losing unsynced data or you need to maintain
    backward-compatibility with older clients that can't update, you can choose
    to migrate your existing data to a new "partner collection" schema with the
    desired changes. To learn how to implement this strategy, refer to
    :ref:`migrate-schema-partner-collection`.

.. _schema-versioning-changes-overview:

Schema Versioning Changes
~~~~~~~~~~~~~~~~~~~~~~~~~

Schema versioning changes are a special subset of breaking change for production
apps. These changes do not require you to terminate Device Sync or
manually perform a client reset.

Instead, the server creates a new backward-compatible version of your existing
schema, then automatically handles existing clients on older schemas
in a backward-compatible way. This ensures data consistency across schema
versions, as devices on older schema versions can still sync with the server and
other SDK devices.

To learn more, refer to :ref:`update-data-model-production`.

.. important:: Schema Versioning is Incompatible with Development Mode

   While :ref:`Development Mode <development-mode>` is enabled, App Services
   disables schema versioning in your app, and processes schema versioning
   changes as breaking changes.

   Additionally, if you enable Development Mode in an app with versioned
   schemas, App Services deletes all existing versions regardless of
   whether they are currently in use by an existing client. This will disrupt
   Sync for any client using a deleted version.

.. _breaking-change-quick-reference:

Update a Data Model: Quick Reference
------------------------------------

This section summarizes whether a data model change is considered a
non-breaking, schema versioning, or breaking change when made to the server-side
App Services schema or to the client-side SDK data model.

.. figure:: /images/data-model-changes-from-client-or-server.png
   :alt: Summary of data model changes when made from client or server side
   :lightbox:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Description of Change
     - Server-Side Schema
     - Client-Side Data Model
   * - :ref:`Add an object type <schema-update-add-object-type>`
     - Non-breaking
     - Non-breaking
   * - :ref:`Add a property <schema-update-add-required-property>`
     - Non-breaking
     - Non-breaking
   * - :ref:`Add default value on a property <schema-update-add-a-default-value>`
     - Non-breaking
     - Non-breaking
   * - :ref:`Remove an object type <schema-update-remove-object-type>`
     - Schema Versioning*
     - Non-breaking
   * - :ref:`Remove a property <schema-update-remove-property>`
     - Schema Versioning*
     - Non-breaking
   * - :ref:`Change whether a property is optional or required <schema-update-change-property-status>`
     - Schema Versioning*
     - Breaking
   * - :ref:`Rename an object type <schema-update-change-object-type-name>`
     - Breaking
     - Breaking
   * - :ref:`Rename a property <schema-update-change-property-name>`
     - Breaking
     - Breaking
   * - :ref:`Change property data type <schema-update-change-property-type-but-keep-name>`
     - Breaking
     - Breaking

* If Development Mode is enabled in your app, schema versioning is disabled, and
  App Services processes schema versioning changes as breaking changes.

The following diagram shows the types of changes you can make and the
process perform the change:

Add an Object Type
~~~~~~~~~~~~~~~~~~

You can add an object type to either the server-side schema or the client
object model without any additional handling.

If you want to add an object type to both the server-side schema and the
client object model, you can add the object type to the object model, and
use :ref:`Development Mode <development-mode>` to let App Services handle the
server-side schema updates. Or you can manually add the object type to both
the model and the schema.

.. note:: These changes may trigger a resync

   When you add a new object type, we retrieve the documents for the
   collection and re-insert them into App Services to get the new values. This
   is expected behavior, but it does cause a temporary halt to propagating
   changes while this process is underway.

Add a Default Value on a Property
---------------------------------

You can add a default value on an object's required property. When you
insert an Atlas document missing this required property into the
collection, the Realm clients set the property to the default value. However,
the same property on the Atlas document remains empty until a client makes
changes to the property or updates the document directly in Atlas.

We recommend that you add a default value to a property in the following
scenarios:

- You are adding a new required property (either on its own or as part of a new
  object type)
- You are removing a property that does not have a default value. By adding a
  default value to your App Services schema *before* deleting the property from
  your data model, Device Sync

  .. todo how is this supposed to work exactly??


- Development: Add the default value to your client-side models. Device Sync
  updates the schema the next time you sync data. If you have existing Atlas
  documents that are missing a value, the property remains empty until a synced
  client makes changes or you update the document directly in Atlas.
- Production:

To set a default value to an existing property in App Services:

.. note:: You Can't Set a Default Value from Table View

#. Navigate to :guilabel:`Schemas` screen:

   .. include:: /includes/navigation/nav-to-schema-page.rst

#. Find and select the collection you want to edit the schema for, then toggle
   the editor view to ``JSON View``.

#. Update the JSON schema to set a default value for a given property, similar
   to ``"default": <value> ``.

   .. figure:: /images/set-default-value.png
      :alt: Setting default value using the Schema screen editor
      :lightbox:

For more information on how default values are helpful when modifying
existing Atlas documents, see :ref:`<schema-update-add-required-property>`.

.. warning:: Ensure the default value type and property's type are the same

   The default field does not have type validation. If the default field's type
   and the property's type are not the same, the error will indicate that
   the document is missing a required field.
