.. _synced-schema-overview:
.. _destructive-changes-synced-schema:
.. _additive-changes-synced-schema:

======================
Update Your Data Model
======================

.. meta::
   :description: Make changes to an existing Device Sync data model.  

.. facet::
  :name: genre
  :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   :titlesonly:

   Update with Development Mode </sync/data-model/update-data-model/update-schema-development-apps>
   Update Production Apps </sync/data-model/update-data-model/update-schema-production-apps>
   Manually Update </sync/data-model/update-data-model/migrate-schema-partner-collection>

When developing an application using Atlas Device Sync, you may need to make 
changes to the Device Sync data model that you initially created. For example,
you might need a new object type or decide that an optional property should be 
required.

There are a few things to consider when making changes to your data model, which
this guide will help you navigate:

In general, we discuss data model updates in the following terms: 

- *The type of change* 
  
  We broadly categorize changes to a Device Sync data model
  as being either breaking or non-breaking. Breaking changes, such as changing
  the data type of an existing property, are considered destructive and require
  additional handling to apply. We'll discuss breaking and non-breaking changes in more detail below.

- *Where you are making the change* 
  
  Because the Device Sync data model consists of a client-side SDK object model
  and a server-side App Services schema, we distinguish between making changes
  to the client side (updating the SDK object models defined in your client
  code) or the server side (updating the collection schema through the App
  Services UI or Admin API). Regardles of where you make your
  changes, though, the end result must be that both
  sides reflect the changes to ensure clients can continue to sync data with
  Atlas. The implications of where you make your changes are discussed in more detail below. 

- *Whether y automatic handling of breaking changes* 
  
  If your app has Development Mode enabled or supports schema versioning, App
  Services can help automatically apply changes that might otherwise require manual handling. 
  We'll discuss how Development Mode and schema versioning can help you apply breaking changes in more detail below.
- While your app is in development, you can enable Development Mode in your
   Sync settings and Sync will automatically handle updating the server-side
   schema with changes that you make to your client-side models. 
- When your app is in production, schema versioning in your
- Otherwise, you must manually update your data model. For more information, refer to :ref:`migrate-schema-partner-collection`.
  
Breaking and Non-Breaking Changes
---------------------------------

**Non-breaking changes** are considered additive changes because they add new elements to your
data model. You can make these changes in your server-side App Services schema or in your
client-side SDK object model. No additional handling is required to apply these
changes.

**Breaking changes** are considered destructive changes because they modify
or remove elements in your data model. These changes require additional handling to apply, depending on
the type of breaking change, where you're making the breaking change, and
whether your app supports automatically handling breaking changes through
Development Mode or schema versioning: 

.. important:: All Changes are Breaking While Sync is Terminated

   You can ref:`terminate and re-enable Device Sync <terminating-realm-sync>` in your app. However, if you update your data
   model while Device Sync is terminated, *all* changes that you make are
   considered breaking changes - even if they are normally categorized as
   non-breaking changes. 

Breaking Changes with Development Mode
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Development Mode** is a Device Sync configuration setting that lets Sync
automatically infer and update the server-side App Services schema based on your
client-side changes - including breaking changes. 

When Development Mode is enabled in an eligible app*, you can make breaking changes to your client-side object model, and Device Sync automatically
applies the changes to your server-side schema.  
* *Your app must be created after September 13, 2023 and meet the minimum Device
SDK version, as noted in :ref:`<update-data-model-development-mode-prerequisites>`* 

To learn more, refer to :ref:`update-data-model-development-mode`.

For more information on Development Mode and how to enable it in your app, refer to :ref:`sync-settings`. 

.. include:: /includes/note-dev-mode-production.rst

Breaking Changes with Schema Versioning
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Schema versioning** is an App Services feature that lets you make breaking
changes to your server-side schema while an eligible app* is in production. 
App Services creates a new schema version with your changes and automatically
handles upgrading the client-side model to the new version.
* *Your app must be created after [DATE TBD], as noted in :ref:`<update-data-model-production-apps-prerequisites>`* 

You *cannot* use schema versioning in Development Mode. If you enable
Development Mode, then schema versioning is automatically disabled and any
version is cleared. When you disable Development Mode, schema
versioning is automatically re-enabled but any version history is unrecoverable.

- Non-breaking changes do *not* create a new schema version or write to the
  version history. Updates from
  non-breaking changes are always backward-compatible to the minimum allowed
  schema version.
- Breaking changes *always* create a new schema version, and the new version is
  either compatible or incompatible with previous versions:

  - **Compatible Breaking Changes:** Compatible breaking changes are changes that
    you can make to your server-side schema that are backward-compatible with
    previous schemas (to the earliest allowed schema version). 

  - **Incompatible Breaking Changes:** Incompatible breaking changes are
    changes that you can make to your server-side schema that are *not*
    backward-compatible with any previous schemas. An incompatible breaking change
    creates a new schema version that becomes the new earliest
    allowed schema version. All previous schemas are invalidated.

To learn more about schema versioning and how to make breaking changes with schema versioning, refer to
:ref:`update-data-model-production-apps`.

Manually Handle Breaking Changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If your app does not support making breaking changes with Development Mode or schema versioning, you must
manually apply breaking changes to your data model. 

For more information on how to manually apply breaking changes to your data
model, refer to :ref:`migrate-schema-partner-collection`.

.. _breaking-change-quick-reference:

Data Model Changes: Quick Reference
-----------------------------------

This table summarizes each type of change, and whether it is considered a breaking or 
non-breaking change when made to the server-side App Services schema or the client-side
SDK object model.

After you've made these changes, the appropriate documents should once again 
sync to the client application.

.. list-table::
   :header-rows: 1
   :stub-columns: 1

* - Description of Change
  - Server-Side Schema
  - Client-Side Object Model
* - :ref:`Add an object type <update-model-add-object-type>`
  - Non-breaking
  - Non-breaking
* - :ref:`Add a property <update-model-add-required-property>`
  - Non-breaking
  - Non-breaking
* - :ref:`Add default value on a property <update-model-add-a-default-value>`
  - Non-breaking
  - Non-breaking
* - :ref:`Remove an object type <update-model-remove-object-type>`
  - Breaking (Compatible)
  - Non-breaking
* - :ref:`Remove a property <update-model-remove-property>`
  - Breaking (Compatible)
  - Non-breaking
* - :ref:`Change whether property is optional or required <update-model-change-property-status>`
  - Breaking (Compatible)
  - Breaking
* - :ref:`Rename an object type <update-model-change-object-type-name>`
  - Breaking (Incompatible)
  - Breaking 
* - :ref:`Rename a property <update-model-change-property-name>`
  - Breaking (Incompatible)
  - Breaking 
* - :ref:`Change property type <update-model-change-property-type-but-keep-name>`
  - Breaking (Incompatible)
  - Breaking 

The following diagram shows the types of changes you can make and the 
process perform the change:

.. TODO: UPDATE WITH NEW DIAGRAM

.. .. figure:: /images/schema_changes_with_versioning.png
..    :alt: Flow chart of schema changes
..    :lightbox:

.. tip:: Remap a Name Instead of Renaming

   Several Device SDKs support remapping a property or class name. Depending on
   your use case, renaming
   through the client code
   can be a convenient
   alternative to renaming your properties or classes. To learn how, refer to the following SDK documentation:

   - C++ SDK - not currently supported
   - :ref:`Flutter SDK - Remap a Property or Class <flutter-map-property>`
   - :ref:`Java SDK - Rename a Field or Class <java-rename-field>`
   - :ref:`Kotlin SDK - Remap a Property or Class <kotlin-remap-a-property>`
   - :ref:`.NET SDK - Rename a Property or Class <dotnet-rename-property>`
   - :ref:`Node.js SDK - Remap a Property or Class <node-remap-a-property>`
   - :ref:`React Native SDK - Remap a Property <react-native-remap-a-property>`
   - :ref:`Swift SDK - Remap a Property <swift-rename-property>`


Data Model Changes
------------------ 

The following sections provide more detailed information on how to make specific
changes to your Device Sync data model:

.. _update-model-add-object-type:

Add an Object Type
~~~~~~~~~~~~~~~~~~

You can add a new object type to the server-side schema or the client
object model without any additional handling.

- If Development Mode is enabled, you can add the object type to the SDK object
  model, and Sync automatically handles the server-side schema updates.
- If schema versioning is enabled, you can add the object type to the server-side
  schema, and Sync automatically handles the client-side SDK object model updates.
- manually add the object type to both the model and the schema.

.. note:: These changes may trigger a resync

   When you add a new object type, we retrieve the documents for the
   collection and re-insert them into App Services to get the new values. This
   is expected behavior, but it does cause a temporary halt to propagating
   changes while this process is underway.

.. _update-model-add-a-default-value:

Add a Default Value on a Property
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can add a default value on an object's required property. When you
insert an Atlas document missing this required property into the
collection, the Realm clients set the property to the default value. However,
the same property on the Atlas document remains empty until a client makes
changes to the property or updates the document directly in Atlas.

For more information on how default values are helpful when modifying
existing Atlas documents, see :ref:`<schema-update-add-required-property>`.

.. warning:: Ensure the default value type and property's type are the same

   The default field does not have type validation. If the default field's type
   and the property's type are not the same, the error will indicate that
   the document is missing a required field.

.. _update-model-add-required-property:

Add a Required Property
-----------------------

You can add a required property to the client's object model, and
use :ref:`Development Mode <development-mode>` to let App Services infer the
server-side schema updates. Or you can manually add the
required property to both the client model and the Atlas schema.
However, you should consider making the property optional to avoid the need to
modify existing Atlas documents.

.. note:: Required Properties Missing in a Schema Subset Will Default to Zero

   Clients can open the Realm with a schema subset that doesn't
   include a required property. The server populates the
   missing required value field with a zero or blank value
   (like 0, "", or 0.0 depending on the property type) when the document syncs.

Modify Existing Atlas Documents
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you add a new required property, you must update existing documents with 
the new property or they do not sync to the client. This may give client 
users the impression that the data has been lost. Resolve this issue by
adding the new property to each impacted document and populating it with a 
value. After you update the documents to match the client schema, they 
sync to the client application.

.. _schema-versioning:

Schema versioning
-----------------


   App Services uses a ``__realm_sync.unsynced_documents`` collection to track 
   unsynced documents. When you add a required property, the re-sync process can 
   push this collection over the limit of 100,000 documents. In this case, you must 
   :ref:`terminate and re-enable sync <terminating-realm-sync>`, even though the 
   change you're making is a non-breaking change. 
