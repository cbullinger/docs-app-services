.. _update-your-data-model:
.. _destructive-changes-synced-schema:
.. _additive-changes-synced-schema:

======================
Update Your Data Model
======================

.. meta::
   :description: Make changes to an existing data model for a Device Sync-enabled App Services App.

.. facet::
   :name: genre
   :values: reference

.. facet::
   :name: programming_language
   :values: shell, json

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. toctree::
   :titlesonly:

   Update Data Model in Development </sync/data-model/update-data-model/update-data-model-development>
   Update Data Model in Production </sync/data-model/update-data-model/update-data-model-production>
   Make Breaking Changes </sync/data-model/update-data-model/migrate-schema-partner-collection>

.. TODO: Rename Partner Collection page

As you develop your Device Sync-enabled app, you might need to make changes to
your app's :ref:`data model <device-sync-data-model>`. For example, you
decide that you need another object type or that an optional property should
be required.

In general, we refer to data model updates in the following terms:

What type of change are you making?
  We broadly categorize changes to a data model as being either *breaking* or
  *non-breaking*, depending on whether they break compatibility with your
  current model. These are discussed in more detail below, or you can check out the :ref:`breaking-change-quick-reference` section on this page.

Where are you making the change?
  Because Device Sync requires a matching client-side SDK data model and
  server-side App Services schema, we discuss data model changes in terms of
  whether you update the *client side* or the *server side* first.
  Depending on the change you are making, there are implications for which side
  you update first and how you apply those same changes to the other side.
  This is discussed in more detail below.

Is your app in development or production?
   The recommended process for updating your data model depends on whether you
   are updating an app in production or in development:

   - If you are :ref:`updating an app in development
     <update-data-model-development-mode>`, we highly recommend enabling
     Development Mode. This lets you update your data model
     directly in your client code, and App Services automatically handles
     applying changes to the server-side schema, including breaking changes. This is discussed in more detail below.

   - If you are :ref:`updating an app in production <update-data-model-production-apps>`,
     you can use schema versioning, which provides a server-initiated migration
     path for clients using an older version of a data model. However, breaking
     changes will still break compatibility with older data models. You must use
     extreme caution and consider the impact of breaking changes to ensure
     existing clients can continue to connect and sync data. This is discussed
     in more detail below.

     .. TODO clean up the above para

.. _non-breaking-changes-overview:

Non-Breaking Changes
--------------------

Non-breaking changes are changes that don't require any additional handling to
apply to your data model. As long as the same change is made to the client and
server models, non-breaking changes maintain compatibility with your existing
data
model. This means that existing client devices can continue to sync data without interruption.

You can make non-breaking changes to your server-side App Services schema
or to your client-side SDK data model, then update the corresponding side
without additional handling, unless otherwise noted (see
:ref:`breaking-change-quick-reference`).

.. _breaking-changes-overview:

Breaking Changes
----------------

Breaking changes are changes that break compatibility with your existing data
model. These changes require additional handling to apply to ensure that existing clients using old data models can still connect
and sync data successfully. Because of this, breaking changes should be avoided in production apps if possible.

You can make breaking changes to your server-side App Services schema or to your
client-side SDK data model, but there are implications depending on the state of
your app and the change your making. Note that you can only make breaking
changes to your schema through the App Services UI. You cannot use the {+cli+}
or automated deploy with GitHub to make breaking changes to your schema.

.. _breaking-changes-development-mode-overview:

Breaking Changes in Development
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

While :ref:`development-mode` is enabled for an app, you can make breaking
changes in your client code, and App Services automatically handles applying
those changes to your server-side schema. Note the following requirements:

- Development Mode *must* be enabled.
- You *must* make the breaking changes to the client-side SDK data model.

To learn more, refer to :ref:`update-data-model-development-mode`.

.. include:: /includes/important-disable-dev-mode-production.rst

.. _breaking-changes-schema-versioning-overview:

Breaking Changes in Production
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Once your app is in production, updating your data model with breaking changes
will break existing clients. We recommend only making breaking changes in a
production app when necessary.

If you determine that a breaking change is needed, you can choose one
of the following strategies to implement the necessary changes. The strategy you
choose depends on your use case, but both require you to manually apply the
changes.

-  **Update your data model and perform a client reset.** When you make a
   breaking change, App Services requires you to :ref:`terminate
   and re-enable Device Sync <pause-or-terminate-sync>`, then perform a
   :ref:`client reset <client-resets>` to restore connectivity with existing
   clients. To learn more, refer to :ref:`update-data-model-production-apps`.

   .. important:: Existing Clients Lose Unsynced Data After Reset

      If you perform a client reset, there is *no* way to migrate data from
      clients that are using an old version of the data model. If clients have
      unsynced data, that data will be lost.

-   **Create a new "Partner Collection" data model**. If you can't tolerate
    losing unsynced data or you need to maintain backward-compatibility with
    older clients that can't update, you can choose to create a new "partner
    collection" schema with the desired changes. You can copy your old data to
    this new collection, then set up triggers to ensure data consistency. To
    learn more, refer to :ref:`migrate-schema-partner-collection`.

.. include:: /includes/important-breaking-changes-sync-terminated.rst

.. _schema-versioning-changes-overview:

Schema Versioning Changes
-------------------------

.. note:: Schema Versioning

If schema versioning is enabled for your production app, App Services considers and
handles specific breaking changes as schema versioning changes. Schema versioning changes are backward-compatible changes to an App Services
schema that create a new schema version independent of your existing data model.
When you deploy a schema versioning change, App Services increments the
version, then automatically handles existing clients on older schemas in
a backward-compatible way. This means that devices on older schema versions can still sync with the Device Sync server and other SDK devices, ensuring data consistency across schema versions.

Schema versioning is incompatible with Development Mode.

Currently, schema versioning changes must be made from the server side. To learn
more about how to work with versioned schemas in your app, refer
to :ref:`update-data-model-production-apps`.

.. TODO from Ben: The main distinction is that the developer must manually upgrade the client to the new schema version (by making the changes in the SDK)

.. _breaking-change-quick-reference:

Update a Data Model: Quick Reference
------------------------------------

This section summarizes whether a data model change is considered a
non-breaking, schema versioning, or breaking change when made to the server-side
App Services schema or to the client-side SDK data model.

.. figure:: /images/data-model-changes-from-client-or-server.png
   :alt: Data model changes from client or server
   :lightbox:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Description of Change
     - Server-Side Schema
     - Client-Side Data Model
   * - :ref:`Add an object type <schema-update-add-object-type>`
     - Non-breaking
     - Non-breaking
   * - :ref:`Add a property <schema-update-add-required-property>`
     - Non-breaking
     - Non-breaking
   * - :ref:`Add default value on a property <schema-update-add-a-default-value>`
     - Non-breaking
     - Non-breaking
   * - :ref:`Remove an object type <schema-update-remove-object-type>`
     - Schema Versioning
     - Non-breaking
   * - :ref:`Remove a property <schema-update-remove-property>`
     - Schema Versioning
     - Non-breaking
   * - :ref:`Change whether a property is optional or required <schema-update-change-property-status>`
     - Schema Versioning
     - Breaking
   * - :ref:`Rename an object type <schema-update-change-object-type-name>`
     - Breaking
     - Breaking
   * - :ref:`Rename a property <schema-update-change-property-name>`
     - Breaking
     - Breaking
   * - :ref:`Change property data type <schema-update-change-property-type-but-keep-name>`
     - Breaking
     - Breaking

The following diagram shows the types of changes you can make and the
process perform the change:

.. TODO: UPDATE WITH NEW DIAGRAM

.. .. figure:: /images/schema_changes_with_versioning.png
..    :alt: Flow chart of schema changes
..    :lightbox:
