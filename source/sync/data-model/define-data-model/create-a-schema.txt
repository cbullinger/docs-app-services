.. _create-schema-for-backend-realm-app:

=================================
Define Data Model from Client App
=================================

.. meta::
   :description: Generate an App Services schema from your client app data model using Development Mode.
   :keywords: Realm, object model, C++ SDK, Flutter SDK, Java SDK, Kotlin SDK, .NET SDK, Node.js SDK, React Native SDK, Swift SDK

.. facet::
   :name: genre
   :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

App Services can generate an App Services schema from your client-side objects.
This means that you can define your data model from your client code first, then
use Development Mode to automatically generate a schema for each synced object
type. Device Sync assigns each schema to a collection in the linked cluster with
the same name as the object type.

.. include:: /includes/device-sync/device-sync-definition.rst

If you prefer to define your data model from your App Services schema first or
need to generate an SDK data model from your App Services schema, refer to
:ref:`generate-sdk-object-models`.

For more information on defining a data model for Device Sync, refer to :ref:`create-sync-schema`.

.. _create-schema-from-rom:

Generate a Schema from Synced SDK Objects
-----------------------------------------

Do the following to define a data model from your client app using Atlas Device
SDK, then generate a matching App Services schema using Development Mode.

.. note:: Device Sync Data Source Limitations

   You *cannot* use a :ref:`serverless instance <serverless-caveats>`
   or {+adf-instance+} as your App's Device Sync cluster. For more
   information, refer to :ref:`data-source-limitations`.

.. procedure::

   .. step:: Define Your Client-Side SDK Data Model

      Create a data model in your client code. To work with Device Sync, your
      data model must meet the following requirements:

      - All objects that you want to sync *must* have a primary key field called
        ``_id``. The ``_id`` can be of type ``string``, ``int``, or
        ``objectId``.
      - Your object or class names cannot exceed {+name-char-limit+} UTF-8
        characters.

      Refer to the Atlas Device SDK documentation for creating a data
      model in your preferred SDK language:

      - :ref:`C++ SDK <cpp-object-models>`
      - :ref:`Flutter SDK <flutter-define-realm-object-schema>`
      - :ref:`Java SDK <java-define-a-realm-object-schema>`
      - :ref:`Kotlin SDK <kotlin-supported-types>`
      - :ref:`.NET SDK <dotnet-sync-changes-between-devices>`
      - :ref:`Node.js SDK <node-define-a-realm-object-schema>`
      - :ref:`React Native SDK <react-native-define-a-realm-object-schema>`
      - :ref:`Swift SDK <swift-object-models>`

   .. step:: Enable Device Sync with Development Mode

      Development Mode requires Device Sync to be enabled in your App Services App.

      To enable Device Sync through the App Services UI, do the following. For instructions using the {+cli+} or Admin API, refer to :ref:`enable-sync`.

      .. include:: /includes/navigation/nav-to-device-sync-page.rst

      Select the :guilabel:`Configuration` tab, then toggle
      :guilabel:`Development Mode` on. For details on the other available configuration settings, refer to :ref:`sync-settings`.

      .. figure:: /images/turn-on-dev-mode.png
         :alt: The UI to enable Development Mode
         :lightbox:

      Click :guilabel:`Enable Sync`, take note of any recommendations that
      appear, then confirm.

   .. step:: Generate Your App Services Schema

      While Development Mode is enabled, connect a client to your
      App Services App. After syncing data, Atlas automatically generates a
      matching schema that maps to the SDK data model that you defined.

      For more information on how data maps between the client and server-side
      models, refer to :ref:`sync-data-model-mapping`.

   .. step:: Develop Your App

      After your data model is defined, you can continue to use Development Mode
      while your app is in development. As you make changes to your client-side model, App Services ensures that your schema reflects those updates. For more information, refer to :ref:`update-data-model-development-mode`.

      When you disable Development Mode, App Services automatically updates your App Services schema and uses it to enforce data validation for your Atlas cluster.
