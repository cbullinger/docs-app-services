.. _generate-sdk-object-models:

===================================
Define Data Model from App Services
===================================

.. meta::
   :description: Generate client-side data models in your preferred SDK language from an existing App Services schema.
   :keywords: Realm, object model, C++ SDK, Flutter SDK, Java SDK, Kotlin SDK, .NET SDK, Node.js SDK, React Native SDK, Swift SDK

.. facet::
   :name: genre
   :values: tutorial

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

App Services can translate your App Services schema to idiomatic models that you
can use directly in your client app. This means that you can define your data
model from App Services first, then generate the corresponding language-specific
object models.

You might choose this approach when:

- You already have data in an Atlas cluster. Instead of manually defining
  models in your client, you generate an App Services schema from your
  sampled Atlas data and the corresponding models for the SDK of your choice.

- You are building apps using multiple Atlas Device SDKs. For example, you have
  an iOS app using the Swift SDK and an Android app using the Kotlin SDK. You
  decide to define your App Services schemas first, then generate the data
  models in both languages.

If you prefer to define your data model from your client first, then generate an
App Services schema, refer to :ref:`create-schema-for-backend-realm-app`.

For more information on defining a data model for Device Sync, refer to :ref:`create-sync-schema`.

.. _create-rom-from-schema:

Generate SDK Models from a Schema
---------------------------------

You can generate data models from an App Services schema from the App Services
UI or using the {+cli+}.

.. procedure::

   .. step:: Define an App Services Schema

      If you don't already have an App Services schema defined for each synced
      object type, you can define it through the App Services UI or using the
      App Services CLI:

      - If you use the App Services UI, you have to option to either:
         - Generate a schema from existing data in the collection, then modify as needed.
         - Define your schema manually by adding field-level schema definitions.
      - If you use the CLI, you must create your schema manually.

      For instructions, refer to :ref:`define-a-schema`.

      To work with Device Sync, your App Services schema must meet the following
      requirements:

      - All objects  *must* have a primary key field called``_id``. The ``_id``
        can be of type ``string``, ``int``, or ``objectId``.
      - Your schema object :ref:`type names <sync-type-name>` cannot exceed
        {+name-char-limit+} UTF-8 characters.

   .. step:: Generate Data Models Based On Your Schema

   .. tabs-realm-admin-interfaces::

      .. tab::
         :tabid: ui

         .. include:: /includes/navigation/nav-to-device-sync-page.rst

         From the :guilabel:`Sync Models` tab, you can view the
         data models generated in all Atlas Device SDK languages.

         Use the :guilabel:`Platform` and :guilabel:`Language` dropdowns
         to select your preferred SDK. The page updates with a generated
         models translated to the selected language.

         .. image:: /images/translate-jsonschema-into-realm-data-model.png
            :alt: Generated SDK data models in App Services UI

      .. tab::
         :tabid: cli

         Use the :ref:`{+cli-bin+} schema <appservices-schema>` CLI commands to
         generate your data models.

         First, run the following:

         .. code-block:: shell

            {+cli-bin+} schema datamodels -a "<Your App ID>"

         Next, confirm the following options when prompted:

         1. Select the language you want the SDK data models generated in.
         #. Choose whether to omit the import statements from the generated
            code.
         #. Choose whether to group all generated data models together in a
            single output.

         .. code-block:: shell

            ? Select the language you would like to generate data models in
            ? Would you like to omit imports?
            ? Would you like to group all generated data models together?

   .. step:: Add the Generated Models to Your Client Code

   .. tabs-realm-admin-interfaces::

      .. tab::
         :tabid: ui

         Copy the generated models to your clipboard, then paste them directly
         into your client code.

         You can copy individual models or all models:

         - To copy all models for the selected language, click
            :guilabel:`Copy All Data Models`.

            When prompted, choose whether you want to include import
            statements (default) or exclude them from the copied data, then
            click :guilabel:`Copy`.
         - To copy a single model, click the :guilabel:`Copy` icon for the
            data model code block.

      .. tab::
         :tabid: cli

         Copy the generated models from your terminal, then paste them into
         your client code.

   .. step:: Open a Synced Database with the SDK Data Model

      You can use the data model in your client application immediately.
      Refer to the Atlas Device SDK-specific documentation to open a
      synced database with the generated model:

      - :ref:`Flutter SDK <flutter-sync>`
      - :ref:`Java SDK <java-sync-data>`
      - :ref:`Kotlin SDK <kotlin-sync-overview>`
      - :ref:`.NET SDK <dotnet-sync-changes-between-devices>`
      - :ref:`Node.js SDK <node-sync-changes-between-devices>`
      - :ref:`React Native SDK <react-native-realm-sync>`
      - :ref:`Swift SDK <ios-sync-changes-between-devices>`
